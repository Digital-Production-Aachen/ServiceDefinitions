// MIT License
// 
// Copyright (c) 2021 Digital-Production-Aachen
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

service HardwareController{
    rpc TakePicture(PictureConfig) returns (stream Picture) {}
}

service SettingsPlugin{
    rpc GetDefaultSettings(Empty) returns (Settings) {}
    rpc GetSettingsRange(Empty) returns (SettingsRange) {}
    rpc TakePictureWithSettings(TakePictureWithSettingsRequest) returns (stream Picture) {}
}

service ServiceController{
    rpc TakePicture(PictureConfig) returns (PicturePointer) {}
    rpc GetPicture(PicturePointer) returns (stream Picture) {}
    rpc DeletePicture(PicturePointer) returns (Empty) {}
    rpc GetAllPictures(Empty) returns (PicturePointers) {}
}

enum DataFormat  {PNG = 0; JPG = 1; RAW = 2; BMP = 3;}

message TakePictureWithSettingsRequest{
    Settings settings = 1;
    PictureConfig picture_config = 2;
}

message Settings{
    float gain_in_dezibel = 1;
    float exposure_time_in_microseconds = 2;
}

message SettingsRange{
    float gain_lower_limit_in_dezibel = 1;
    float gain_upper_limit_in_dezibel = 2;
    float exposure_time_lower_limit_in_microseconds = 3;
    float exposure_time_upper_limit_in_microseconds = 4;
}

message PictureConfig{
    // format of the returned data
    DataFormat data_format = 1;
}

message Empty{
}

message PicturePointers{
    repeated PicturePointer picture_pointers = 1;
}

message Picture{
    // Date and time at wich the picture was taken in ms Unixstamp
    int64 shot_time = 1;

    // Taken picture serialzed to a string
    bytes data = 2;

    // Size of the Picture in Bytes
    int64 file_size = 3;
}

message PicturePointer{
    string uri = 1;
}
