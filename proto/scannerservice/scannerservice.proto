// MIT License
// 
// Copyright (c) 2021 Digital-Production-Aachen
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

syntax = "proto3";

option go_package = "servicedefinitions/proto/scannerservice";
package scannerservice;
import "open_vector_format.proto";

service HardwareController{
	rpc JumpToPosition(Position) returns (Time);
	rpc ScanWorkPlane(WorkPlaneMessage) returns (Time);
	rpc GetHardScanField(Empty) returns (ScanFieldConfig);
}

service ServiceController{
	rpc JumpToPosition(Position) returns (Time);
	rpc ScanWorkPlane(WorkPlaneMessage) returns (ProtoPointer);
	rpc RescanWorkPlane(ProtoPointer) returns (Time);
	rpc GetScannedWorkPlanes(WorkPlaneMessage) returns (Time);
	rpc GetScannedWorkPlane(ProtoPointer) returns (WorkPlaneMessage);
}

message WorkPlaneMessage{
	open_vector_format.WorkPlane workPlane = 1;
	map<int32,open_vector_format.MarkingParams> markingparams = 2;
}

message Empty{
}
message ScanFieldConfig{
	int64 xminimum = 1;
	int64 xmaximum = 2;
	int64 yminimum = 3;
	int64 ymaximum = 4;
}

message Position{
	int64 x = 1;
	int64 y = 2;

}
message Time{
    	int64 timestamp = 1;
}

message ProtoPointer{
	oneof pointer{
		string URI = 1;
		int64 timestamp = 2;
	}
}

